{"version":3,"file":"static/js/236.ca0ccbe5.chunk.js","mappings":"2NAeI,IAIA,EAJuB,CACnBA,gBAdR,SAAyBC,GAMvB,OAAOC,MAAM,GAAD,OARG,uCAQH,OAAeD,EAAf,2BALM,CACfE,QAAS,CACPC,cAAe,gOAInBC,MAAK,SAAAC,GACD,OAAIA,EAASC,GACHD,EAASE,OAEZC,QAAQC,OAAO,IAAIC,MAAJ,YAAuB,GAC/C,G,SCbL,GAAgB,KAAO,mBAAmB,KAAO,oB,SC4CjD,EAnCa,WACT,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAAsBJ,EAAAA,EAAAA,UAAS,MAArBK,GAAV,eAIOhB,GAAWiB,EAAAA,EAAAA,MAAXjB,QAYT,OAVEkB,EAAAA,EAAAA,YAAU,WACDlB,IACLe,GAAa,GACbI,EAAAA,gBAA+BnB,GAASI,MAAK,SAACgB,GAC3C,IAAMC,EAAcD,EAAKR,KACxBC,GAAQ,OAAKQ,GACf,IACHC,OAAM,SAAAC,GAAUP,EAASO,EAAO,IAAEC,SAAQ,WAC3CT,GAAa,EACJ,IAAE,GAAE,CAACf,KAEhB,2BACMc,IAAa,SAACW,EAAA,EAAD,IACdb,GAAO,eAAIc,UAAWC,EAAAA,KAAf,SACNf,EAAKgB,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,aAAcC,EAArB,EAAqBA,KAAMC,EAA3B,EAA2BA,UAA3B,OAA2C,gBAAaN,UAAWC,EAAAA,KAAxB,WAClD,gBAAMM,IAAKH,EAAY,UA3BjB,mCA2BiB,OAAkBA,GA1BjC,4DA0BgEI,IAAI,GAAGC,MAAM,SAC7F,cAAGT,UAAWC,EAAAA,UAAd,SAAiCI,KACjC,eAAGL,UAAWC,EAAAA,UAAd,UAAgC,cAAYK,OAHuBH,EAApD,MAKH,OAKf,C,4CC9BD,IAVc,WACd,OAAO,SAAC,KAAD,CACLO,YAAY,OACZC,YAAY,IACZC,kBAAkB,OAClBH,MAAM,KACNI,SAAS,GAEV,C","sources":["components/services/MoviesCast.jsx","webpack://react-homework-template/./src/components/Cast/Cast.module.css?c9ee","components/Cast/cast.jsx","components/Loader/Loader.jsx"],"sourcesContent":["const BASE_URL = 'https://api.themoviedb.org/3/movie/'\n\nfunction FetchMoviesCast(movieId){\n    const options = {\n     headers: {\n       Authorization: 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwM2FlMjVjMDdmZmJkZTQ4MzNlOTI4MzAwODQ5MTY0ZSIsInN1YiI6IjY0NmNlYTMyYzM1MTRjMmIwYmY0MGJhMiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.-xetNvo1KnrMsW_faMs9w9HxpC-ebylSqWAUjThjL_g'\n     }};\n   \n  return fetch(`${BASE_URL}${movieId}/credits?language=en-US`, options)\n  .then(response => {\n       if (response.ok) {\n          return response.json();\n        }\n       return Promise.reject(new Error(`No movie`))});\n    }\n    const apiCastDetails = {\n        FetchMoviesCast,\n    }\n    \n    export default apiCastDetails;","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"Cast_list__GlWio\",\"item\":\"Cast_item__a0CDL\"};","\nimport { useEffect, useState, React  } from 'react';\nimport { useParams} from 'react-router-dom';\nimport apiCastDetails from 'components/services/MoviesCast'\nimport Loader from \"components/Loader/Loader\";\nimport Styles from 'components/Cast/Cast.module.css'\n\nconst posterUrl = 'https://image.tmdb.org/t/p/w500';\nconst noPosterUrl = 'https://sd.keepcalms.com/i/keep-calm-poster-not-found.png';\n\nconst Cast = () => {\n    const [cast, setCast] = useState([])\n    const [isLoading, setIsLoading] = useState(false)\n    const [ , setError] = useState(null);\n\n  \n   \n    const {movieId} = useParams();\n    \n    useEffect(()=> {\n        if (!movieId) return;\n        setIsLoading(true)\n        apiCastDetails.FetchMoviesCast(movieId).then((data) => \n          {const castOfMovie = data.cast\n            setCast( [...castOfMovie])\n         })\n      .catch(error => {setError(error)}).finally(() => {\n      setIsLoading(false)\n              })}, [movieId])\n  return (\n    <div>\n         {isLoading && <Loader/>}\n        {cast? (<ul className={Styles.list}>\n        { cast.map(({ id, profile_path, name, character })=> (<li key={id} className={Styles.item}>\n            <img  src={profile_path ? `${posterUrl}${profile_path}` : noPosterUrl}  alt=\"\" width=\"100\" />\n    <p className={Styles.titleName}>{name}</p>\n    <p className={Styles.titleName}>Character: {character}</p>\n </li>))}\n        </ul>): null}\n       \n      \n    </div>\n  )\n}\n\nexport default Cast\n","import { RotatingLines } from  'react-loader-spinner'\n\n\nconst Loader =()=>{\nreturn(<RotatingLines\n  strokeColor=\"grey\"\n  strokeWidth=\"5\"\n  animationDuration=\"0.75\"\n  width=\"96\"\n  visible={true}\n/>)\n}\n\nexport default Loader"],"names":["FetchMoviesCast","movieId","fetch","headers","Authorization","then","response","ok","json","Promise","reject","Error","useState","cast","setCast","isLoading","setIsLoading","setError","useParams","useEffect","apiCastDetails","data","castOfMovie","catch","error","finally","Loader","className","Styles","map","id","profile_path","name","character","src","alt","width","strokeColor","strokeWidth","animationDuration","visible"],"sourceRoot":""}