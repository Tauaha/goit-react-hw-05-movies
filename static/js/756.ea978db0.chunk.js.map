{"version":3,"file":"static/js/756.ea978db0.chunk.js","mappings":"4JAaA,IAVc,WACd,OAAO,SAAC,KAAD,CACLA,YAAY,OACZC,YAAY,IACZC,kBAAkB,OAClBC,MAAM,KACNC,SAAS,GAEV,C,2GCQG,IAIA,EAJ0B,CACtBC,mBAlBR,SAA4BC,GAS1B,OAAOC,MAAM,GAAD,OAXG,uCAWH,OAAeD,EAAf,2BAPM,CACfE,OAAQ,MACRC,QAAS,CACPC,OAAQ,mBACRC,cAAe,gOAInBC,MAAK,SAAAC,GACD,OAAIA,EAASC,GACHD,EAASE,OAGZC,QAAQC,OAAO,IAAIC,MAAJ,YAAuB,GAC/C,G,SCjBL,EAAuB,sBAAvB,EAAoD,sBAApD,EAAsF,2B,SCoCtF,EAhCgB,WACd,OAA8BC,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAAsBJ,EAAAA,EAAAA,UAAS,MAArBK,GAAV,eACOlB,GAAWmB,EAAAA,EAAAA,MAAXnB,QAYP,OAVAoB,EAAAA,EAAAA,YAAU,WACDpB,IACLiB,GAAa,GACbI,EAAAA,mBAAqCrB,GAASM,MAAK,SAACgB,GACjD,IAAMC,EAAiBD,EAAKE,QAC3BT,GAAW,OAAKQ,GAClB,IACHE,OAAM,SAAAC,GAAUR,EAASQ,EAAO,IAAEC,SAAQ,WAC3CV,GAAa,EACJ,IAAE,GAAE,CAACjB,KAEd,2BACIgB,IAAa,SAACY,EAAA,EAAD,IAChBd,GAAU,eAAIe,UAAWC,EAAf,SACThB,EAAQiB,KAAI,gBAAGC,EAAH,EAAGA,GAAKC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,QAAhB,OAA8B,gBAAaL,UAAWC,EAAxB,WAEhD,cAAGD,UAAWC,EAAd,SAAiCG,KACjC,uBAAKC,MAHoDF,EAAvC,MAKN,OAKX,C","sources":["components/Loader/Loader.jsx","components/services/MoviesReviews.jsx","webpack://react-homework-template/./src/components/Reviews/Reviews.module.css?7248","components/Reviews/Reviews.jsx"],"sourcesContent":["import { RotatingLines } from  'react-loader-spinner'\n\n\nconst Loader =()=>{\nreturn(<RotatingLines\n  strokeColor=\"grey\"\n  strokeWidth=\"5\"\n  animationDuration=\"0.75\"\n  width=\"96\"\n  visible={true}\n/>)\n}\n\nexport default Loader","const BASE_URL = 'https://api.themoviedb.org/3/movie/'\n\nfunction FetchMoviesReviews(movieId){\n   \n    const options = {\n     method: 'GET',\n     headers: {\n       accept: 'application/json',\n       Authorization: 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwM2FlMjVjMDdmZmJkZTQ4MzNlOTI4MzAwODQ5MTY0ZSIsInN1YiI6IjY0NmNlYTMyYzM1MTRjMmIwYmY0MGJhMiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.-xetNvo1KnrMsW_faMs9w9HxpC-ebylSqWAUjThjL_g'\n     }};\n   \n  return fetch(`${BASE_URL}${movieId}/reviews?language=en-US`, options)\n  .then(response => {\n       if (response.ok) {\n          return response.json();\n        }\n    \n       return Promise.reject(new Error(`No movie`))});\n    }\n    const apiReviewsDetails = {\n        FetchMoviesReviews,\n    }\n    \n    export default apiReviewsDetails;","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"Reviews_list__okdpy\",\"item\":\"Reviews_item__DJKij\",\"titleName\":\"Reviews_titleName__cEfvK\"};","import { useEffect, useState, React  } from 'react';\nimport { useParams} from 'react-router-dom';\nimport apiReviewsDetails from 'components/services/MoviesReviews';\nimport Loader from \"components/Loader/Loader\";\nimport Styles from 'components/Reviews/Reviews.module.css'\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([])\n  const [isLoading, setIsLoading] = useState(false)\n  const [ , setError] = useState(null);\n  const {movieId} = useParams();\n  \n  useEffect(()=> {\n      if (!movieId) return;\n      setIsLoading(true)\n      apiReviewsDetails.FetchMoviesReviews(movieId).then((data) => \n        {const reviewsOfMovie = data.results\n          setReviews( [...reviewsOfMovie])\n       })\n    .catch(error => {setError(error)}).finally(() => {\n    setIsLoading(false)\n            })}, [movieId])\n  return (\n    <div>\n       {isLoading && <Loader/>}\n    {reviews? (<ul className={Styles.list}>\n    { reviews.map(({ id,  author, content })=> (<li key={id} className={Styles.item}>\n        \n<p className={Styles.titleName}>{author}</p>\n<p >{content}</p>\n</li>))}\n    </ul>): null}\n   \n  \n</div>\n  )\n}\n\nexport default Reviews\n"],"names":["strokeColor","strokeWidth","animationDuration","width","visible","FetchMoviesReviews","movieId","fetch","method","headers","accept","Authorization","then","response","ok","json","Promise","reject","Error","useState","reviews","setReviews","isLoading","setIsLoading","setError","useParams","useEffect","apiReviewsDetails","data","reviewsOfMovie","results","catch","error","finally","Loader","className","Styles","map","id","author","content"],"sourceRoot":""}